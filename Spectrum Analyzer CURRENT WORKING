// Set the width of your 2D display (number of columns)
var width = 32;
var height = pixelCount / width;

// Peak value indicators [hue, saturation, value]
var peakHSV = [0, 1, 1];

// Get frequency information from the sensor expansion board
export var frequencyData = array(32);

// Peak values for each column
var peaks     = array(width);
// Smoothed current frequency values for each column
var fy        = array(width);
// Target frequency values before smoothing
var targetFy  = array(width);

var peakDropMs = 0;

// Automatic gain / PI controller
var targetMax  = 0.9;
var averageMax = 0.0;
var pic        = makePIController(0.25, 1.8, 30, 0, 200);

// Raised floor to ignore background hiss
var threshold  = 0.02;  

function makePIController(kp, ki, start, min, max) {
  var p = array(5);
  p[0] = kp;
  p[1] = ki;
  p[2] = start;
  p[3] = min;
  p[4] = max;
  return p;
}

function calcPIController(p, err) {
  p[2] = clamp(p[2] + err, p[3], p[4]);
  // clamp output so sensitivity stays reasonable
  return clamp(p[0] * err + p[1] * p[2], 1, 15);
}

export function beforeRender(delta) {
  // Calculate sensitivity based on the target maximum
  var sensitivity = calcPIController(pic, targetMax - averageMax);

  peakDropMs += delta * 1000;  // convert to milliseconds

  // Drop all the peaks every 200ms
  if (peakDropMs > 200) {
    peakDropMs = 0;
    for (var i = 0; i < width; i++) {
      peaks[i] = max(0, peaks[i] - 2);
    }
  }

  var currentMax = 0;
  for (var i = 0; i < width; i++) {
    // linear mapping of binâ†’column
    var lvl = frequencyData[i];

    // Apply threshold check
    if (lvl > threshold) {
      var powerLevel    = (lvl - threshold) * sensitivity;
      targetFy[i]       = floor(clamp(powerLevel, 0, 1) * height);
    } else {
      targetFy[i] = 0;
    }

    // slower smoothing: 80% old + 20% new
    fy[i] = fy[i] * 0.8 + targetFy[i] * 0.2;

    // maintain a peak indicator
    peaks[i]   = max(peaks[i], fy[i]);
    currentMax = max(currentMax, lvl);
  }

  // update running average for PI controller
  averageMax = averageMax * 0.98 + currentMax * 0.02;
}

export function render2D(index, x, y) {
  var col    = floor(x * width);
  var row    = height - 1 - floor(y * height);

  // decide on/off
  var v = (fy[col] > row) ? 1 : 0;
  var h = time(0.1) + (col / width);
  var s = 1;

  // override with peak color
  if (peaks[col] === row) {
    h = peakHSV[0];
    s = peakHSV[1];
    v = peakHSV[2];
  }

  return hsv(h, s, v);
}
