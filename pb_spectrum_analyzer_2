export var frequencyData

var cols = 12
var rows = 5

var fy = array(cols)
var t1

// PI Controller for auto-gain
var targetMax = 0.9
var averageMax = 0.0
var pic = makePIController(0.25, 1.8, 30, 0, 200)

function makePIController(kp, ki, start, min, max) {
  var pic = array(5)
  pic[0] = kp
  pic[1] = ki
  pic[2] = start
  pic[3] = min
  pic[4] = max
  return pic
}

function calcPIController(pic, err) {
  pic[2] = clamp(pic[2] + err, pic[3], pic[4])
  return pic[0] * err + pic[1] * pic[2]
}

export function beforeRender(delta) {
  sensitivity = max(1, calcPIController(pic, targetMax - averageMax))
  t1 = time(0.1)

  var currentMax = 0.0
  for (i = 0; i < cols; i++) {
    var band = floor(log(i / cols + 1) * 32)
    var level = frequencyData[band] * sensitivity
    var normalized = clamp(level / 255, 0, 1)
    fy[i] = floor(normalized * rows)
    currentMax = max(currentMax, normalized)
  }

  averageMax = averageMax - (averageMax / 50) + (currentMax / 50)
}

export function render2D(index, x, y) {
  var xPixel = floor(x * cols)
  var yPixel = rows - 1 - floor(y * rows)

  var isLit = fy[xPixel] > yPixel
  var hue = (t1 + xPixel / cols) % 1

  return hsv(hue, 1, isLit)
}
