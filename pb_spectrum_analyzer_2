export var frequencyData

var cols = 12
var rows = 5

var peaks = array(cols)
var fy = array(cols)

var t1
var peakDropMs = 0

// Auto gain controller
var targetMax = 0.9
var averageMax = 0.0
var pic = makePIController(0.25, 1.8, 30, 0, 200)

function makePIController(kp, ki, start, min, max) {
  var pic = array(5)
  pic[0] = kp
  pic[1] = ki
  pic[2] = start
  pic[3] = min
  pic[4] = max
  return pic
}

function calcPIController(pic, err) {
  pic[2] = clamp(pic[2] + err, pic[3], pic[4])
  return pic[0] * err + pic[1] * pic[2]
}

export function beforeRender(delta) {
  sensitivity = max(1, calcPIController(pic, targetMax - averageMax))
  t1 = time(0.1)
  peakDropMs += delta

  if (peakDropMs > 100) {
    peakDropMs = 0
    for (i = 0; i < cols; i++) {
      peaks[i] = max(0, peaks[i] - 1)
    }
  }

  currentMax = 0.0
  for (i = 0; i < cols; i++) {
    // Logarithmic bin selection for 32-band data
    var band = floor(log(i / cols + 1) * 32)
    var level = frequencyData[band] * sensitivity
    var normalized = clamp(level / 255, 0, 1)
    fy[i] = floor(normalized * (rows - 1))
    peaks[i] = max(peaks[i], fy[i])
    currentMax = max(currentMax, normalized)
  }

  averageMax = averageMax - (averageMax / 50) + (currentMax / 50)
}

export function render2D(index, x, y) {
  var col = floor(x * cols)
  var row = floor(y * rows)

  // Flip row order to have bars grow bottom-up
  var flippedRow = rows - 1 - row

  var peak = peaks[col]
  var current = fy[col]

  var isPeak = flippedRow == peak
  var isLit = flippedRow <= current || isPeak

  var hue = t1 + col / cols
  var sat = isPeak ? 0 : 1
  var val = isLit ? 1 : 0

  return hsv(hue % 1, sat, val)
}
